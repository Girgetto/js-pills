{"componentChunkName":"component---src-templates-pill-template-js","path":"/pill/merging","result":{"data":{"markdownRemark":{"html":"<h1>Merging arrays</h1>\n<h2>Method 1: Concat</h2>\n<p>If you need to merge two arrays you can use the Array.concat() function:</p>\n<pre><code class=\"language-js\">const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconsole.log(array1.concat(array2)); // [1,2,3,4,5,6];\n</code></pre>\n<p>This method is not the best to merge big lists as it will take a lot of memory by creating a new array. </p>\n<h2>Method 2: Push</h2>\n<p><code>Array.push.apply(arr1, arr2)</code> is more efficient since it will merge the second array in the first one, saving a third larger array:</p>\n<pre><code class=\"language-js\">const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconsole.log(array1.push.apply(array1, array2)); // [1,2,3,4,5,6];\n</code></pre>\n<p>The downside is - <code>push</code> mutates the first array.</p>\n<h2>Method 3: Push with spread</h2>\n<p>Similar to method 2, but leveraging the <code>spread</code> operator.</p>\n<pre><code class=\"language-js\">const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconsole.log(array1.push(...array2)); // [1,2,3,4,5,6];\n</code></pre>\n<h2>Method 4: ES6 spread operator</h2>\n<pre><code class=\"language-js\">const array1 = [1, 2, 3];\nconst array2 = [4, 5, 6];\nconst array3 = [...array1, ...array2];\n</code></pre>\n<p>More flexible since you could do things like <code>const array3 = [...array1, 10, ...array2, 12];</code> Similar to method 1 in terms of performance.</p>","frontmatter":{"date":"May 04, 2019","slug":"/pill/merging","title":"merging"}}},"pageContext":{"slug":"/pill/merging"}},"staticQueryHashes":[]}