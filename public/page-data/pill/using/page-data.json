{"componentChunkName":"component---src-templates-pill-template-js","path":"/pill/using","result":{"data":{"markdownRemark":{"html":"<h1>Converting to boolean using <code>!!</code> operator</h1>\n<h3>What is a boolean Value?</h3>\n<p>JavaScript has a Boolean data type. It can <strong>only</strong> take the values true or false, like YES/NO or ON/OFF</p>\n<h3>But, what is true and what is false?</h3>\n<p>JavaScript is very flexible about the types of values it requires. If JavaScript wants a boolean, it will convert whatever value you give it to a boolean.</p>\n<p>Some values (“truthy” values) convert to true and others (“falsy” values) convert to false.</p>\n<h1>❎ False</h1>\n<pre><code class=\"language-js\">false // false\n0 // false\n-0 // false \n0n // false\n'' // false\nnull // false\nundefined // false\nNaN // false\n</code></pre>\n<h1>✅ True</h1>\n<pre><code class=\"language-js\">true // true\n42 // true\n-13.3 // true\nInfinity // true\n-Infinity // true\n{} // true ❗\n[] // true ❗\n\"false\" // true ❗\n\"0\" // true ❗\n\" \" // true ❗\n...\n</code></pre>\n<h3>Then, What !! is for?</h3>\n<p>A single “!” symbol in Javascript, also called a “bang”, is the logical “not” operator. If you place this operator in front of a value, it will converse it to boolean and reverse the value, returning the opposite. So, running a bang twice determines the opposite of value, and then returns the opposite of that.</p>\n<p>(So <code>!!</code> is not an operator, is just the <code>!</code> operator used twice)</p>\n<pre><code class=\"language-js\">!!0; // return false\n!!42; // return true\n!!parseInt('foo'); // return false, NaN is falsy\n!!window.foo; // return false, undefined is falsy\n!!''; // return false\n</code></pre>\n<h3>An example please</h3>\n<p>Sometimes you need to check whether the value of a variable exists and whether it is valid, so that in these cases we consider them true.</p>\n<pre><code class=\"language-js\">function BankAccount(cash) {\n  this.cash = cash;\n  this.hasMoney = !!cash;\n}\nlet account = new BankAccount(100.5);\nconsole.log(account.cash); // 100.50\nconsole.log(account.hasMoney); // true\n\nlet emptyAccount = new BankAccount(0);\nconsole.log(emptyAccount.cash); // 0\nconsole.log(emptyAccount.hasMoney); // false\n</code></pre>\n<br/>\n<h3>Combination with &#x26;&#x26; operator</h3>\n<p>When you use <code>&#x26;&#x26;</code> operator, if the first object is falsy, it returns that object</p>\n<pre><code class=\"language-js\">false &#x26;&#x26; 'dog';\n// ↪ false\n\n0 &#x26;&#x26; 'dog';\n// ↪ 0\n\n!!0 &#x26;&#x26; 'dog';\n// ↪ false\n</code></pre>\n<h3>A real life example please</h3>\n<p><code>!!</code> Might be useful when libraries expect explicit Boolean values, for instance React ⚛️</p>\n<pre><code class=\"language-js\">{\n  jobs.length &#x26;&#x26; jobs.map((job) => &#x3C;CardJob job={job} />);\n}\n{\n  jobs.length === 0 &#x26;&#x26; &#x3C;h1>No jobs to show&#x3C;/h1>;\n}\n</code></pre>\n<p>⚠️ if jobs.length = 0, it will return 0, so te correct way is:</p>\n<pre><code class=\"language-js\">{\n  !!jobs.length &#x26;&#x26; jobs.map((job) => &#x3C;CardJob job={job} />);\n}\n{\n  jobs.length === 0 &#x26;&#x26; &#x3C;h1>No jobs to show&#x3C;/h1>;\n}\n</code></pre>\n<p>You also probably used <code>foo > 0</code> or <code>foo != \"\"</code> for the same cases</p>\n<h2>And what about boolean()?</h2>\n<p>The result is the same, but according to this test looks like !! is faster than boolean()\n<a href=\"https://jsperf.com/bool-not-not\">Test !! vs boolean()</a></p>\n<h2>⛔ Never use object new boolean()</h2>\n<p>Do not create Boolean objects. It slows down execution speed.\nThe new keyword complicates the code. This produce unexpected results</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://www.samanthaming.com/tidbits/19-2-ways-to-convert-to-boolean/\">Samantha Ming Tidbits: 2 Ways to Convert Values to Boolean in JavaScript</a></li>\n<li><a href=\"https://andela.com/insights/javascript-convert-to-boolean-using-double-bangoperator/\">Andela: Javascript convert to boolean using !!(double bang)operator</a></li>\n<li><a href=\"https://stackoverflow.com/questions/784929/what-is-the-not-not-operator-in-javascript/1406621\">stackoverflow: What is the !! (not not) operator in JavaScript?</a></li>\n<li><a href=\"https://techy360.com/11-useful-javascript-tips-and-tricks/\">techy360: 11 useful JavaScript tips and tricks</a></li>\n</ul>","frontmatter":{"date":"May 04, 2019","slug":"/pill/using","title":"in-operator"}}},"pageContext":{"slug":"/pill/using"}},"staticQueryHashes":[]}