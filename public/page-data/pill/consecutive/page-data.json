{"componentChunkName":"component---src-templates-pill-template-js","path":"/pill/consecutive","result":{"data":{"markdownRemark":{"html":"<h1>Creating an array of consecutive numbers</h1>\n<p>This is a collection of examples on how we can create an <b>array of consecutive numbers from 1 to n</b> in JavaScript, from the classic for loop to the ES6 Array class methods.</p>\n<h2>01# Example with common for loop</h2>\n<p>Similar to many other languages, not very cool but, in fact, <b>the fastest way</b>.</p>\n<pre><code class=\"language-js\">const createArray = n => {\n  const array = [];\n  for (let i=1; i&#x3C;=n; i++) {\n    array.push(i);\n  }\n  return array;\n}\n</code></pre>\n<h2>02# Example with Array constructor and map</h2>\n<p>In this example it's important to notice that Array constructor returns an empty array (an array with empty slots, <b>not an array with undefined values!</b>). This difference is important and it's why we need to call the fill method without any argument in order to get the array filled with real values (undefined in this case) so we can then iterate over it.</p>\n<pre><code class=\"language-js\">const createArray02 = n => Array(n).fill().map((_,i) => i+1);\n</code></pre>\n<h2>03# Example with spread operator and keys() method</h2>\n<p>We can also use the spread operator combined with Array.keys() method in order to get an array <b>containing indexes from 0 to n-1</b>.</p>\n<pre><code class=\"language-js\">const createArray03 = n => [...Array(n).keys()].map(e => e+1);\n</code></pre>\n<h2>04# Example with Array.from() static method</h2>\n<p>Array.from method allows us to create arrays from \"array-like\" objects passed as first argument and a map function as the second one.</p>\n<p>These examples just show the difference in the map functions depending on the source array.</p>\n<pre><code class=\"language-js\">const createArray04a = n => Array.from(Array(n), (_,i) => i+1);\nconst createArray04b = n => Array.from(Array(n).keys(), e => e+1);\n</code></pre>\n<h2>05# Example with Array.from() with an array-like object</h2>\n<p>Here we extend the previous examples with a more interesting case where the array-like object is a <b>simple object containing a \"length\" property</b>.</p>\n<pre><code class=\"language-js\">const createArray05 = n => Array.from({ length: n }, (_,i) => i+1)\n</code></pre>\n<h3>References</h3>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\">MDN Array class docs</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/keys\">MDN Array.keys()</a></p>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/from\">MDN Array.from() docs</a></p>","frontmatter":{"date":"May 04, 2019","slug":"/pill/consecutive","title":"consecutive"}}},"pageContext":{"slug":"/pill/consecutive"}},"staticQueryHashes":[]}